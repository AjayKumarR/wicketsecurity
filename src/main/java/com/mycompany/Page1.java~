package us.jts.commander;


import com.googlecode.wicket.jquery.ui.Options;
import com.googlecode.wicket.jquery.ui.interaction.resizable.ResizablePanel;
import com.googlecode.wicket.jquery.ui.panel.JQueryFeedbackPanel;
import com.inmethod.grid.IGridColumn;
import com.inmethod.grid.SizeUnit;
import com.inmethod.grid.column.PropertyColumn;
import com.inmethod.grid.column.editable.EditablePropertyColumn;
import com.inmethod.grid.column.editable.SubmitCancelColumn;
import com.inmethod.grid.treegrid.TreeGrid;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.Model;
import org.apache.wicket.spring.injection.annot.SpringBean;
import us.jts.fortress.ReviewMgr;
import us.jts.fortress.rbac.User;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import java.util.ArrayList;
import java.util.List;

public class Page2 extends CommanderBasePage
{
    @SpringBean
    private ReviewMgr reviewMgr;

    public Page2()
    {
        add(new Label("label2", "This is in the subclass Page2"));


		// Feedback Panel//
		final FeedbackPanel feedback = new JQueryFeedbackPanel("feedback");
		this.add(feedback);

		// ResizablePanel //
		Options options = new Options();
		options.set("minWidth", 200);
		options.set("maxWidth", 1400);
		options.set("minHeight", 100);
		options.set("maxHeight", 700);


        List<IGridColumn> columns = new ArrayList<IGridColumn>();

        columns.add(new SubmitCancelColumn("edit", new Model("Edit")));
        columns.add(new PropertyColumn(new Model("UserId"), "userObject.UserId"));
        columns.add(new PropertyColumn(new Model("InternalId"), "userObject.InternalId"));
        columns.add(new EditablePropertyColumn(new Model("Cn"), "userObject.Cn"));
        columns.add(new PropertyColumn(new Model("Dn"), "userObject.Dn"));
        columns.add(new EditablePropertyColumn(new Model("Ou"), "userObject.Ou"));
        columns.add(new EditablePropertyColumn(new Model("Sn"), "userObject.Sn"));
        //columns.add(new EditablePropertyColumn(new Model("ModId"), "userObject.ModId"));
        //columns.add(new PropertyColumn(new Model("ModId"), "userObject.ModId"));
        columns.add(new EditablePropertyColumn(new Model("BeginDate"), "userObject.BeginDate"));
        columns.add(new EditablePropertyColumn(new Model("EndDate"), "userObject.EndDate"));
        columns.add(new EditablePropertyColumn(new Model("BeginLockDate"), "userObject.BeginLockDate"));
        columns.add(new EditablePropertyColumn(new Model("EndLockDate"), "userObject.EndLockDate"));
        columns.add(new EditablePropertyColumn(new Model("BeginTime"), "userObject.BeginTime"));
        columns.add(new EditablePropertyColumn(new Model("EndTime"), "userObject.EndTime"));
        columns.add(new EditablePropertyColumn(new Model("DayMask"), "userObject.DayMask"));
        columns.add(new EditablePropertyColumn(new Model("Description"), "userObject.Description"));
        columns.add(new EditablePropertyColumn(new Model("PwPolicy"), "userObject.PwPolicy"));

        //columns.add(new EditablePropertyColumn(new Model("ModCode"), "userObject.ModCode"));
        //columns.add(new EditablePropertyColumn(new Model("Property"), "userObject.Property"));
        //columns.add(new EditablePropertyColumn(new Model("RawData"), "userObject.RawData"));

        TreeModel model = createTreeModel();
        TreeGrid grid = new TreeGrid("gridu", model, columns);
        //grid.setContentHeight(23, SizeUnit.EM);
        grid.setContentHeight(40, SizeUnit.EM);
        grid.setAllowSelectMultiple(true);
        grid.setClickRowToSelect(true);
        grid.setClickRowToDeselect(false);
        grid.setSelectToEdit(true);

        // expand the root node
        grid.getTreeState().expandNode((TreeNode) model.getRoot());


		this.add(new MyResizablePanel2("resizable", options, grid) {

			private static final long serialVersionUID = 1L;


			@Override
			public void onResizeStart(AjaxRequestTarget target, int top, int left, int width, int height)
			{
				this.info(String.format("resize started - position: [%d, %d], size: [%d, %d]", left, top, width, height));

				target.add(feedback);
			}

			@Override
			public void onResizeStop(AjaxRequestTarget target, int top, int left, int width, int height)
			{
				this.info(String.format("resize stoped - position: [%d, %d], size: [%d, %d]", left, top, width, height));

				target.add(feedback);
			}
		});
    }

    protected TreeModel createTreeModel()
    {
        TreeModel model = null;
        DefaultMutableTreeNode rootNode = null;
        try
        {
            //ReviewMgr reviewMgr = ReviewMgrFactory.createInstance(GlobalIds.HOME);
            List<User> users = reviewMgr.findUsers(new User(""));
            User rootUser = new User();
            rootUser.setUserId("Users");
            rootNode = new DefaultMutableTreeNode(rootUser);
            model = new DefaultTreeModel(rootNode);
            if (users == null)
                System.out.println("no Users found");
            else
            {
                System.out.println("Users found:" + users.size());
                for (User user : users)
                    rootNode.add(new DefaultMutableTreeNode(user));
                //int size = users.size();
                //for (int i = 0; i < size; i++)
                //    rootNode.add(new DefaultMutableTreeNode(users.get(i)));
            }
        }
        catch (us.jts.fortress.SecurityException se)
        {
            System.out.println("SecurityException=" + se.getMessage());
        }
        return model;
    }


    class MyResizablePanel2 extends ResizablePanel
   	{

   		private static final long serialVersionUID = 1L;

   		public MyResizablePanel2(String id, Options options, TreeGrid grid)
   		{
   			super(id, options);

               final Form<Void> form = new Form<Void>("form");
               form.add(grid);
               add(form);
   		}

   		@Override
   		public boolean isResizeStartEventEnabled()
   		{
   			return true;
   		}

   		@Override
   		public boolean isResizeStopEventEnabled()
   		{
   			return true;
   		}
   	}

    class MyResizablePanel extends ResizablePanel
   	{
   		private static final long serialVersionUID = 1L;

   		public MyResizablePanel(String id, Options options)
   		{
   			super(id, options);
   		}

   		@Override
   		public boolean isResizeStartEventEnabled()
   		{
   			return true;
   		}

   		@Override
   		public boolean isResizeStopEventEnabled()
   		{
   			return true;
   		}
   	}
}
